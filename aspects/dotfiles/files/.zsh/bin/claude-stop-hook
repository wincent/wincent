#!/usr/bin/env ruby
# SPDX-License-Identifier: MIT
# SPDX-FileCopyrightText: Copyright (c) Scott Chacon
# Forked from: https://github.com/schacon/cc-hooks-auto-commit

require 'json'
require 'tempfile'

# Read JSON from STDIN
input = STDIN.read
begin
  data = JSON.parse(input)
rescue JSON::ParserError => e
  # Can't parse input, exit cleanly
  exit 0
end

# Extract required fields
session_id = data['session_id']
cwd = data['cwd']
transcript_path = data['transcript_path']

# Exit cleanly if required fields are missing
exit 0 unless session_id && cwd && transcript_path

# Change directory to the cwd
begin
  Dir.chdir(cwd)
rescue
  # Can't change directory, exit cleanly
  exit 0
end

# Read all entries and find the last user message with string content (same as post_chat.rb)
begin
  last_user_entry = File.foreach(transcript_path)
    .map { |line| JSON.parse(line.strip) }
    .reverse
    .find { |entry| entry.dig('message', 'role') == 'user' && entry.dig('message', 'content').is_a?(String) }
rescue => e
  # Can't parse transcript, exit cleanly
  exit 0
end

# Extract message content from the last user entry
message_content = last_user_entry&.dig('message', 'content')

# Use default commit message if no message content found
unless message_content
  message_content = "Claude Code session completed"
end

# Create branch name
branch_ref = "refs/heads/claude/#{session_id}"

# Construct paths
index_dir = File.join(cwd, '.git', 'claude', 'indexes', session_id)
index_file = File.join(index_dir, 'index')
base_commit_file = File.join(index_dir, 'base_commit')

# Determine parent commit
parent_commit = nil

# Check if the branch exists
branch_exists = system("git show-ref --verify --quiet #{branch_ref}")

if branch_exists
  # Use the commit that the branch points to
  begin
    parent_commit = `git rev-parse #{branch_ref}`.strip
  rescue
    exit 0
  end
else
  # Use the base_commit file contents
  if File.exist?(base_commit_file)
    begin
      parent_commit = File.read(base_commit_file).strip
    rescue
      exit 0
    end
  else
    # Fallback to HEAD if base_commit file doesn't exist
    begin
      parent_commit = `git rev-parse HEAD`.strip
    rescue
      exit 0
    end
  end
end

# Create commit tree from the session index
if File.exist?(index_file)
  begin
    # Write the index tree
    tree_sha = `GIT_INDEX_FILE=#{index_file} git write-tree`.strip

    # Create temporary file with the message content
    temp_file = Tempfile.new('commit_message')
    begin
      temp_file.write(message_content)
      temp_file.close

      # Create commit using git commit-tree
      commit_sha = `git commit-tree #{tree_sha} -p #{parent_commit} -F #{temp_file.path}`.strip

      # Update the ref to point to the new commit
      system("git update-ref #{branch_ref} #{commit_sha}")
    ensure
      temp_file.unlink
    end
  rescue
    # Git operations failed, exit cleanly
    exit 0
  end
else
  # No session index exists - this happens when no files were modified during the session
  # Exit cleanly rather than with an error
  exit 0
end
