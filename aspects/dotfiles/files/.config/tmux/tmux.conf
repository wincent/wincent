# For readability, make use of some local variables.
#
# Note: `%hidden` variables were added in 3.2, around 2021-06, so that makes 3.2
# our minimum supported version.
#
%hidden TMUX_VERSION="#{s|next-||:#{version}}"
%hidden IS_TMUX_3_3_OR_ABOVE="#{e|>=|f|0:$TMUX_VERSION,3.3}"
%hidden IS_TMUX_3_4_OR_ABOVE="#{e|>=|f|0:$TMUX_VERSION,3.4}"
%hidden IS_TMUX_3_5_OR_ABOVE="#{e|>=|f|0:$TMUX_VERSION,3.5}"

# Symbolic names for "Vim"-like modes.
%hidden NORMAL=0
%hidden VISUAL=1
%hidden VISUAL_LINE=2
%hidden VISUAL_BLOCK=3

set-option -g @mode $NORMAL

# Set prefix to space.
unbind-key C-b
set-option -g prefix C-Space

# Bindings:
# - to see current bindings:
#   tmux list-keys

# Intuitive window-splitting keys.
bind-key | split-window -h -c '#{pane_current_path}' # normally prefix-%
bind-key '\' split-window -h -c '#{pane_current_path}' # normally prefix-%
bind-key - split-window -v -c '#{pane_current_path}' # normally prefix-"

# Open split panes with the path of the current pane.
unbind-key %
bind-key % split-window -h -c '#{pane_current_path}'
unbind-key '"'
bind-key '"' split-window -v -c '#{pane_current_path}'

# Same for new windows.
unbind-key c
bind-key c new-window -c '#{pane_current_path}'

# Vim-like key bindings for pane navigation (default uses cursor keys).
unbind-key h
bind-key h select-pane -L
unbind-key j
bind-key j select-pane -D
unbind-key k
bind-key k select-pane -U
unbind-key l # normally used for last-window
bind-key l select-pane -R

# Resizing (mouse also works).
# Here, and in other binds, `-r` allows us to repeat without having to hit the
# prefix (with repeat-time, which defaults to 500ms).
unbind-key Left
bind-key -r Left resize-pane -L 5
unbind-key Right
bind-key -r Right resize-pane -R 5
unbind-key Down
bind-key -r Down resize-pane -D 5
unbind-key Up
bind-key -r Up resize-pane -U 5

# Fast toggle between current and last-used window (normally prefix-l).
bind-key ^space last-window

# `^space ^space` is awfully close to the destructive `^space space`, which
# trashes the layout. Provide a quick way to get back to the previous-used
# layout.
#
# prefix-p is normally used for previous-window, but I never use that,
# prefering numeric access or the fast toggle above (prefix-^space).
bind-key p select-layout -o

bind-key -r '<' swap-window -d -t '{previous}' # Move window left.
bind-key -r '>' swap-window -d -t '{next}' # Move window right.

# Status bar.
set-option -g status-left-length 40
set-option -g status-left '#[fg=yellow,bold,italics]#{session_name} ยง ' # SECTION SIGN (UTF-8: c2 a7)
set-option -g status-right "#[fg=yellow,bold,italics]$USER@#{host_short} #[fg=magenta]%l:%M %p"
set-option -g status-interval 60 # Default is 15.

# Automatically renumber window numbers on closing a pane (tmux >= 1.7).
set-option -g renumber-windows on

# Make widths constant with or without flags.
set-option -w -g window-status-current-format '#[reverse] #{window_index}:#{window_name}#{window_flags} '

set-option -w -g window-status-format ' #{window_index}:#{window_name}#{?#{==:#{window_flags},},  ,#{window_flags} }'

set-option -w -g xterm-keys on

# Mouse can be used to select panes, select windows (by clicking on the status
# bar), resize panes. For default bindings see `tmux list-keys`.
set-option -g mouse on

# Stay in copy mode on drag end.
# (Would use `bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X
# stop-selection` but it is a bit glitchy.)
unbind-key -T copy-mode-vi MouseDragEnd1Pane

# Scroll 3 lines at a time instead of default 5; don't extend dragged selections.
bind-key -T copy-mode-vi WheelUpPane {
  select-pane
  send-keys -t'{mouse}' -X clear-selection
  send-keys -t'{mouse}' -X -N 3 scroll-up
  set-option -g @mode $NORMAL
}
bind-key -T copy-mode-vi WheelDownPane {
  select-pane
  send-keys -t'{mouse}' -X clear-selection
  send-keys -t'{mouse}' -X -N 3 scroll-down
  set-option -g @mode $NORMAL
}

# Make double and triple click work outside of copy mode (already works inside it with default bindings).
bind-key -T root DoubleClick1Pane if-shell -Ft'{mouse}' '#{alternate_on}' \
  "send-keys -M" {
    copy-mode -t'{mouse}' -H
    send-keys -t'{mouse}' -X select-word
    set-option -g @mode $VISUAL
  }
bind-key -T root TripleClick1Pane if-shell -Ft'{mouse}' '#{alternate_on}' \
  "send-keys -M" {
    copy-mode -t'{mouse}' -H
    send-keys -t'{mouse}' -X select-line
    set-option -g @mode $VISUAL_LINE
  }

# Don't exit copy mode on double or triple click.
bind-key -T copy-mode-vi DoubleClick1Pane if-shell -Ft'{mouse}' '#{alternate_on}' \
  "send-keys -M" {
    copy-mode -t'{mouse}' -H
    send-keys -t'{mouse}' -X select-word
    set-option -g @mode $VISUAL
  }
bind-key -T copy-mode-vi TripleClick1Pane if-shell -Ft'{mouse}' '#{alternate_on}' \
  "send-keys -M" {
    copy-mode -t'{mouse}' -H
    send-keys -t'{mouse}' -X select-line
    set-option -g @mode $VISUAL_BLOCK
  }

# For other ways of getting into copy-mode, ensure we pass -H to suppress the
# top-right indicator. (These are the same as the default bindings, apart from
# the addition of the -H.)
#
# Not tackled here: MouseDown3Pane and M-MouseDown3Pane, which have massive and
# complicated definitions for creating context menus.
bind-key [ copy-mode -H
bind-key PPage copy-mode -u -H
bind-key -T root MouseDrag1Pane if-shell -F "#{||:#{pane_in_mode},#{mouse_any_flag}}" {
  send-keys -M
  send-keys -X rectangle-off
  set-option -g @mode $VISUAL
} {
  copy-mode -M -H
  send-keys -X rectangle-off
  set-option -g @mode $VISUAL
}

bind-key -T root WheelUpPane if-shell -F "#{||:#{pane_in_mode},#{mouse_any_flag}}" {
  send-keys -M
  if-shell -F "#{pane_in_mode}" "send-keys -X rectangle-off"
  set-option -g @mode $NORMAL
} {
  copy-mode -e -H
  send-keys -X rectangle-off
  set-option -g @mode $NORMAL
}

# `C-c`, `Escape`, and `q` exit copy mode.
bind-key -T copy-mode-vi Escape {
  send-keys -X cancel
  set-option -g @mode $NORMAL
}
bind-key -T copy-mode-vi C-c {
  send-keys -X cancel
  set-option -g @mode $NORMAL
}
bind-key -T copy-mode-vi q {
  send-keys -X cancel
  set-option -g @mode $NORMAL
}

# `Enter` and `y` yank and exit copy mode.
bind-key -T copy-mode-vi Enter {
  send-keys -X copy-pipe-and-cancel clip
  set-option -g @mode $NORMAL
}
bind-key -T copy-mode-vi y {
  send-keys -X copy-pipe-and-cancel clip
  set-option -g @mode $NORMAL
}

# Override default for `v` (`send-keys -X rectangle-toggle`).
bind-key -T copy-mode-vi v if-shell -F '#{selection_present}' {
    if-shell -F '#{||:#{==:#{@mode},#{VISUAL_BLOCK}},#{==:#{@mode},#{VISUAL_LINE}}}' {
      # If in VISUAL_BLOCK or VISUAL_LINE mode, go to vanilla VISUAL mode.
      send-keys -X rectangle-off
      set-option -g @mode $VISUAL
    } {
      # We appear to be in VISUAL mode; go back to NORMAL mode.
      send-keys -X rectangle-off
      send-keys -X clear-selection
      set-option -g @mode $NORMAL
    }
  } {
    # If in NORMAL mode, start VISUAL mode.
    send-keys -X rectangle-off
    send-keys -X begin-selection
    set-option -g @mode $VISUAL
  }

# Ditto for C-v.
bind-key -T copy-mode-vi C-v if-shell -F '#{selection_present}' {
    if-shell -F '#{||:#{==:#{@mode},#{VISUAL}},#{==:#{@mode},#{VISUAL_LINE}}}' {
      # If in VISUAL or VISUAL_LINE mode, go to VISUAL_BLOCK mode.
      send-keys -X rectangle-on
      set-option -g @mode $VISUAL_BLOCK
    } {
      # We appear to be in VISUAL_BLOCK mode; go back to NORMAL mode.
      send-keys -X rectangle-off
      send-keys -X clear-selection
      set-option -g @mode $NORMAL
    }
  } {
    # If in NORMAL mode, start VISUAL_BLOCK mode.
    send-keys -X rectangle-on
    send-keys -X begin-selection
    set-option -g @mode $VISUAL_BLOCK
  }

# Similar for `V`.
bind-key -T copy-mode-vi V if-shell -F '#{selection_present}' {
    if-shell -F '#{||:#{==:#{@mode},#{VISUAL}},#{==:#{@mode},#{VISUAL_BLOCK}}}' {
      # If in VISUAL or VISUAL_BLOCK mode, go to VISUAL_LINE mode.
      # (Sadly, doesn't exactly match Vim's behavior, because it starts a new
      # linewise selection instead of adjusting the existing selection.)
      send-keys -X rectangle-off
      send-keys -X select-line
      set-option -g @mode $VISUAL_LINE
    } {
      # We appear to be in VISUAL_LINE mode; go back to NORMAL mode.
      send-keys -X clear-selection
      set-option -g @mode $NORMAL
    }
  } {
    # If in NORMAL mode, start VISUAL_LINE mode.
    send-keys -X rectangle-off
    send-keys -X select-line
    set-option -g @mode $VISUAL_LINE
  }

# Slightly more useful width in "main-vertical" layout; enough room for 3-digit
# line number gutter in Vim + 80 columns of text + 1 column breathing room
# (default looks to be about 79).
set-option -w -g main-pane-width 85

set-option -g history-limit 100000

# Start window and pane numbering at 1, (0 is too hard to reach).
set-option -g base-index 1
set-option -g pane-base-index 1

set-option -g pane-border-lines single
set-option -g pane-border-status bottom

# Show copy mode info in pane border. We suppress it (elsewhere) by setting our
# bindings to use the `-H` switch to the `copy-mode` command.
#
# Note that we show position as offset from top of history to make it less
# confusing (tmux usually shows offset from bottom).
#
# - #{?condition,consequent,else} is ternary syntax.
# - #{==:#{pane_mode},copy-mode} is our first condition (equals 1 when
#   `pane_mode` is "copy-mode").
# - #{e|-|:x,y} does our arithmetic, `history_size` - `scroll_position`.
# - #, is used to escape one of the commas inside the "consequent" format of
#   the ternary syntax (without this, the format breaks); funnily enough,
#   escaping is _not_ needing in the "else" format (and including it breaks the
#   format).
# - On next-3.5 and above, we can show `#{search_count}` and
#   `#{search_count_partial}`; this latter is used to show "+" after the count
#   in the event that the search times out without completing (I've never seen
#   this in practice).
# - #{e|>|:x,y} is used to check if `#{search_count}` is greater than zero.
#   and to check if #{search_count_partial}` is non-zero (in practice, it should
#   only ever be 0 or 1).
# - #{==:x,y} is used to check if `#{search_count}` is 1; this is used to decide
#   whether to render "1 result" (singular) or "N results" (plural).
# - #{&&:a,b} is used along with ternary syntax to indicate when our
#   `search_count` is greater than zero and `#{search_present}` is also true
#   (otherwise we'd show the count of the last successful match instead of the
#   current match).
#
# If we get a format that would allow us to know when a search is active, we
# could show a Neovim-style indicator in the middle:
#
#   #[fg=red,align=centre]"Pattern not found: #{pane_search_string}#[default]"
#
# We can't do that right now because `pane_search_string` is set even in the
# absence of a search, `search_match` is true only if the cursor is on a match,
# and although `search_present` will tell us if there is a match anywhere,
# that's not useful if we don't know that a search is active.
#
%hidden IS_COPY_MODE="#{==:#{pane_mode},copy-mode}"
%hidden COPY_MODE_MARKER="#[align=left#,fg=green#,bg=black]  -- COPY --  #[default]"
%hidden COPY_MODE_LEFT="$COPY_MODE_MARKER"
%hidden HAS_SEARCH_RESULT="#{&&:#{e|>|:#{search_count},0},#{search_present}}"
%hidden RESULT_OR_RESULTS="result#{?#{==:#{search_count},1},,s}"
%hidden RESULT_COUNT_IS_PARTIAL="#{e|>|:#{search_count_partial},0}"
%hidden SEARCH_RESULT_COUNT="(#{search_count}#{?$RESULT_COUNT_IS_PARTIAL,+,} $RESULT_OR_RESULTS)"
%hidden OFFSET_FROM_TOP="#{e|-|:#{history_size},#{scroll_position}}"
%hidden COPY_MODE_LOCATION="[$OFFSET_FROM_TOP/#{history_size}]"
%hidden COPY_MODE_CENTER="#[align=centre#,bg=black]#[default]"

%if $IS_TMUX_3_5_OR_ABOVE
%hidden COPY_MODE_RIGHT="#[align=right#,bg=black]  #{?$HAS_SEARCH_RESULT,$SEARCH_RESULT_COUNT  ,}$COPY_MODE_LOCATION  #[default]"
%else
%hidden COPY_MODE_RIGHT="#[align=right#,bg=black]  $COPY_MODE_LOCATION  #[default]"
%endif

set-option -g pane-border-format "#{?$IS_COPY_MODE,$COPY_MODE_LEFT$COPY_MODE_CENTER$COPY_MODE_RIGHT,}"

# Don't wait for an escape sequence after seeing C-Space.
set-option -s escape-time 0

# Dynamically update tab and window titles.
set-option -g set-titles on

# Needed as on tmux 1.9 and up (defaults to off).
# Added in tmux commit c7a121cfc0137c907b7bfb.
set-option -g focus-events on

# But don't change tmux's own window titles.
set-option -w -g automatic-rename off

# Not visible in Kitty, but ~/.zshrc sets pane_title to last/current command.
set-option -g set-titles-string "#{session_name} โข #{pane_title}"

%if $IS_TMUX_3_3_OR_ABOVE
# Default list of word-separators is already: !\"#$%&'()*+,-./:;<=>?@[\\]^`{|}~
# (ie. all non-alphanumeric printable ASCII characters except underscore).
%else
# Add : and / to the default list (" -_@") of word separators.
set-option -g word-separators " -_@:/"
%endif

# Make tinted-shell work by turning passthrough of escape sequences.
# (Needed on tmux 3.3 and later).
# Also, `yazi`: https://yazi-rs.github.io/docs/image-preview/
set-option -g allow-passthrough all

# Make sure we always start at 1, even when invoked from a .tmux wrapper script.
set-environment -g SHLVL 1

# Clipper.
bind-key y run-shell "tmux save-buffer - | clip"
bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "clip"

# Search back to last prompt (mnemonic: "[o]ut") or next prompt (mnemonic:
# "[i]n"), mimicking the Neovim jumplist.


%if $IS_TMUX_3_4_OR_ABOVE
# Use OSC-133 sequences to navigate between prompts.
bind-key o {
  copy-mode -H
  send-keys -X previous-prompt
}
bind-key -T copy-mode-vi -r o {
  send-keys -X previous-prompt
}
bind-key i {
  copy-mode -H
  send-keys -X next-prompt
}
bind-key -T copy-mode-vi -r i {
  send-keys -X next-prompt
}
%else
# Use old-school search for the prompt character to navigate between prompts.
bind-key o {
  copy-mode -H
  send-keys -X start-of-line
  send-keys -X search-backward "โฏ"
  send-keys -X cursor-right
  send-keys -X cursor-right
}
bind-key -T copy-mode-vi -r o {
  send-keys -X start-of-line
  send-keys -X search-backward "โฏ"
  send-keys -X cursor-right
  send-keys -X cursor-right
}
bind-key i {
  copy-mode -H
  send-keys -X end-of-line
  send-keys -X search-forward "โฏ"
  send-keys -X cursor-right
  send-keys -X cursor-right
}
bind-key -T copy-mode-vi -r i {
  send-keys -X end-of-line
  send-keys -X search-forward "โฏ"
  send-keys -X cursor-right
  send-keys -X cursor-right
}
%endif

# Turn on incremental search in vi mode (it's already the default in emacs mode).
bind-key -T copy-mode-vi / command-prompt -i -I "#{pane_search_string}" -T search -p "(search down)" {
  send-keys -X search-forward-incremental "%%"
}
bind-key -T copy-mode-vi ? command-prompt -i -I "#{pane_search_string}" -T search -p "(search up)" {
  send-keys -X search-backward-incremental "%%"
}

# Make "/" and "?" work without going into copy mode first.
bind-key / {
  copy-mode -H
  command-prompt -i -I "#{pane_search_string}" -T search -p "(search down)" {
    send-keys -X search-forward-incremental "%%"
  }
}
bind-key ? {
  copy-mode -H
  command-prompt -i -I "#{pane_search_string}" -T search -p "(search up)" {
    send-keys -X search-backward-incremental "%%"
  }
}

# Analagous with naked C-l which resets/clears the terminal.
bind-key C-l clear-history

source-file -q ~/.config/tmux/theme.conf
source-file -q ~/.config/tmux/colors.conf
source-file -q ~/.config/tmux/local.conf
