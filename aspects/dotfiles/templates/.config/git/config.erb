<%# vim: set filetype=eruby.gitconfig : -%>
# <%= variables.figManaged %>

[absorb]
	autoStageIfNothingStaged = true
	fixupTargetAlwaysSHA = true
	maxStack = 50

[alias]
	# See also, `long`.
	abbrev = !bash -c 'git rev-parse --short ${1-`echo HEAD`}' -

	ack = grep --break --heading
	amend = commit --amend -v
	both = diff --ignore-submodules=dirty HEAD
	br = branch
	ci = commit -v
	co = checkout
	count = !git --no-pager log --oneline | wc -l
	cp = cherry-pick

	delta = "!f() { \
		git diff \"$@\" | delta; \
	}; f"

	# http://stackoverflow.com/questions/224687/git-find-duplicate-blobs-files-in-this-tree/8408640#8408640
	dupes = !"f() { \
		git ls-tree -r HEAD --format='%(objecttype)%x09%(path)%x09%(objectname)' | \
		awk '$1 == \"blob\"' | \
		sort | \
		uniq -D -f 2 | \
		awk '{ print $3 \" \" $2 }'; \
	}; f"

	ff = merge --ff-only

	find = "!f() { \
		git ls-files | grep \"$@\"; \
	}; f"

	fixup = !bash -c 'git commit --fixup=$1 ${@:2}' -
	fresh = remote update --prune
	full = show --format=fuller

	# Shortcut for updating all remotes and fast-forwarding to a specific one:
	# eg. `git get upstream/main`
	get = "!f() { \
		git fresh && git ff \"$@\"; \
	}; f"

	# Equivalent to: `graph --all`
	gr = !git --paginate log --graph --all --pretty=format:'%C(auto)%h%Creset%C(auto)%d%Creset %s %C(magenta bold)(%cr)%Creset %C(cyan)<%= '<\%' %>aN>%Creset'

	# Requires Git 1.6.3 or later; `%C(auto)` requires Git 1.8.3 or later.
	graph = !git --paginate log --graph --pretty=format:'%C(auto)%h%Creset%C(auto)%d%Creset %s %C(magenta bold)(%cr)%Creset %C(cyan)<%= '<\%' %>aN>%Creset'

	# Wrapper for vcs-jump that provides sensible default behavior when invoked
	# without args:
	# - If there are merge conflits, runs `vcs-jump merge`.
	# - If there are changed files, runs `vcs-jump diff`.
	# - Otherwise, runs `vcs-jump` alone (which shows help).
	# - If there are arguments, passes them to `vcs-jump`.
	jump = "!f() { \
		if [ \"$#\" -eq 0 ]; then \
			if [ -n \"$(git diff --name-only --diff-filter=U)\" ]; then \
				vcs-jump merge; \
			elif ! git diff --quiet; then \
				vcs-jump diff; \
			else \
				vcs-jump; \
			fi; \
		else \
			vcs-jump \"$@\"; \
		fi; \
	}; f"

	# Counterpart to `abbrev`.
	long = !bash -c 'git rev-parse ${1-`echo HEAD`}' -

	# Show just the HEAD commit message (no indent) and nothing else.
	message = !git --paginate log -1 --pretty=format:%B

	# Show "my" branches (ie. those starting with "$USER/") in order of recency.
	# See also `recent`.
	mine = branch --list --sort=-committerdate '<%= variables.gitHubUsername %>/*'

	msg = message

	no-edit = commit --amend --no-edit

	# `%C(auto)` requires Git 1.8.3 or later.
	one = !git --paginate log --pretty=format:'%C(auto)%h%Creset %s%C(auto)%d%Creset %C(magenta bold)(%cr)%Creset %C(cyan)<%= '<\%' %>aN>%Creset'
	oneline = !git --paginate log --pretty=format:'%C(auto)%h%Creset %s%C(auto)%d%Creset %C(magenta bold)(%cr)%Creset %C(cyan)<%= '<\%' %>aN>%Creset'

	# Requires Git 1.5.4 or later.
	p = add -p
	patch = add -p

	# Show recently-committed-to branches.
	# See also `mine`.
	recent = branch --list --sort=-committerdate

	# Recover previous COMMIT_EDITMSG, if there is one.
	recover = !cat "$(git rev-parse --git-dir 2> /dev/null)/COMMIT_EDITMSG"

	# Mark merge conflicts as resolved.
	resolve = "!f() { \
		git add $(git diff --name-only --diff-filter=U -- \"${@:-.}\"); \
	}; f"

	# Look for unreachable (dropped) stashes.
	# https://stackoverflow.com/a/5879550/2103996
	resurrect = "!f() { \
		git fsck --unreachable | grep commit | cut -d' ' -f3 | xargs git log --merges --no-walk --grep='WIP on '; \
	}; f"

	# Requires Git 1.7.11.3 or later.
	reword = commit --amend --only -v --

	# Requires Git 1.6.2 or later.
	rollback = !bash -c 'git reset --merge HEAD~${1-1}' -

	# "smartlog", although it's not that smart.
	# Equivalent to `git graph --all --simplify-by-decoration`.
	sl = !git --paginate log --graph --pretty=format:'%C(auto)%h%Creset%C(auto)%d%Creset %s %C(magenta bold)(%cr)%Creset %C(cyan)<%= '<\%' %>aN>%Creset' --all --simplify-by-decoration

	st = status
	staged = diff --cached --ignore-submodules=dirty

	# `%C(auto)` requires Git 1.8.3 or later.
	ten = !git --paginate log -10 --pretty=format:'%C(auto)%h%Creset%C(auto)%d%Creset %s %C(magenta bold)(%cr)%Creset %C(cyan)<%= '<\%' %>aN>%Creset'

	# Compensate for brain damage caused by using Mercurial.
	up = checkout

	wc = whatchanged

	# Similar to `whatchanged`, but gives a dir-level overview.
	#
	# Usage: git wd [diff-against=HEAD] [max-depth=4]
	wd = "!f() { \
		git --paginate diff --dirstat=cumulative,files,0 ${1:-HEAD} | awk '{print $2}' | cut -d / -f1-${2:-4} | sort | uniq; \
	}; f"

	# Same as `wd` ("what directories?") but for files ("what files?").
	#
	# Usage: git wd [diff-against=HEAD]
	wf = "!f() { \
		git --paginate diff --stat=10000 ${1:-HEAD} | awk '{print $1}' | sed '$d' | sort; \
	}; f"

[branch]
	autoSetupMerge = always
	autoSetupRebase = local

[color]
	ui = auto

[color "diff-highlight"]
	newhighlight = reverse
	newreset = noreverse
	oldhighlight = reverse
	oldreset = noreverse

[color "interactive"]
	prompt = blue reverse

[color "status"]
	untracked = blue
<%- if (variables.gitGpgSign) { -%>

[commit]
	gpgSign = true
<%- } -%>

[core]
	# S = chop long lines (rather than wrap them onto next line)
	#
	# This in addition to the "iFMRX" that we get via LESS environment variable.
	# (In the absence LESS, Git would use "FRX".)
	pager = less -S

[delta]
	line-numbers = true
	max-line-length = 0
	side-by-side = true
	syntax-theme = ansi

# ignored by Git older than 1.8.2
[diff]
	algorithm = histogram

	# Added in Git 2.9.0 (experimental): more readable diffs.
	compactionHeuristic = true

	renameLimit = 10000

[difftool]
	prompt = false

[feature]
	# See caveats in `man git-config` about using this before Git 2.40 (2023-03-13).
	manyFiles = true

[filter "lfs"]
	process = git-lfs filter-process
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
<%- if (variables.gitHubUsername) { -%>

[github]
	username = <%= variables.gitHubUsername %>
<%- } -%>

[gpg]
	program = <%= variables.home %>/.zsh/bin/git-gpg

[grep]
	lineNumber = true

	# Requires PCRE support; ie: `brew install git --with-pcre` (on macOS).
	patternType = perl

[help]
	autoCorrect = 10

[init]
	# Requires Git 2.28 or later.
	defaultBranch = main

[interactive]
	diffFilter = diff-highlight
	singleKey = true

[log]
	decorate = short

[merge]
	autoStash = true
	conflictStyle = zdiff3
	log = 1000

[pager]
	diff = ~/.zsh/bin/diff-highlight | menos -iFMRSX --pattern='^(commit|diff)'
	log = ~/.zsh/bin/diff-highlight | menos -iFMRSX --pattern='^(commit|diff)'
	show = ~/.zsh/bin/diff-highlight | menos -iFMRSX --pattern='^(commit|diff)'
	show-branch = true
	status = true
	whatchanged = ~/.zsh/bin/diff-highlight | menos -iFMRSX --pattern='^(commit|diff)'

[protocol]
	# Added in Git 2.18.0.
	version = 2

[pull]
	ff = only

[push]
	# Added in Git 1.7.11, default in 2.0, but still required (to avoid warning).
	default = simple

[rebase]
	autoSquash = true
	autoStash = true

[rerere]
	enabled = true

[status]
	submoduleSummary = true

[submodule]
	# Added in Git 2.9.0.
	fetchJobs = 4

[tag]
	sort = version:refname

[user]
<%- if (variables.gitUserEmail) { -%>
	email = <%= variables.gitUserEmail %>
<%- } -%>
<%- if (variables.gitUserName) { -%>
	name = <%= variables.gitUserName %>
<%- } -%>

# Ignored by Git older than 1.7.10.
[include]
	path = config.local
	path = <%= variables.gitHostSpecificInclude %>
