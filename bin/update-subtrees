#!/usr/bin/env node
// vim: set ft=javascript:

import {execSync} from 'child_process';
import {
  cpSync,
  existsSync,
  mkdirSync,
  readFileSync,
  rmSync,
  writeFileSync,
} from 'fs';
import {dirname, join} from 'path';
import {fileURLToPath} from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const REPO_ROOT = join(__dirname, '..');
const CACHE_DIR = join(REPO_ROOT, '.cache', 'repos');
const DEPENDENCIES_FILE = join(REPO_ROOT, 'dependencies.json');

// Load dependencies config and state
function loadDependenciesState() {
  if (existsSync(DEPENDENCIES_FILE)) {
    try {
      return JSON.parse(readFileSync(DEPENDENCIES_FILE, 'utf8'));
    } catch (error) {
      console.error(
        'Warning: Could not parse dependencies.json, starting fresh',
      );
      return {};
    }
  }
  return {};
}

// Extract dependencies list from the state file
function getDependenciesList(dependenciesState) {
  return Object.entries(dependenciesState).map(([cacheName, config]) => ({
    prefix: config.prefix,
    repo: config.repo,
    branch: config.branch,
  }));
}

// Save dependencies tracking
function saveDependenciesState(state) {
  writeFileSync(DEPENDENCIES_FILE, JSON.stringify(state, null, 2) + '\n');
}

// Get current HEAD hash for a repo
function getRepoHead(repoPath) {
  try {
    return execSync('git rev-parse HEAD', {
      cwd: repoPath,
      encoding: 'utf8',
    }).trim();
  } catch (error) {
    return null;
  }
}

// Get commit log between two refs
function getCommitLog(repoPath, fromRef, toRef) {
  try {
    return execSync(`git log --oneline ${fromRef}..${toRef}`, {
      cwd: repoPath,
      encoding: 'utf8',
    }).trim();
  } catch (error) {
    return null;
  }
}

// Ensure cache directory exists
mkdirSync(CACHE_DIR, {recursive: true});

// Load previous state
const dependenciesState = loadDependenciesState();
const DEPENDENCIES = getDependenciesList(dependenciesState);
const changelog = [];

// Process dependencies in parallel
async function updateDependency({prefix, repo, branch}) {
  // Derive cache name from repo URL (e.g., github/wincent/command-t)
  const url = new URL(repo);
  const pathParts = url.pathname.replace(/\.git$/, '').split('/').filter(
    Boolean,
  );
  const host = url.hostname.split('.')[0]; // e.g., github.com -> github
  const cacheName = join(host, ...pathParts);
  const cachePath = join(CACHE_DIR, cacheName);

  console.log(`Processing ${prefix}...`);

  // Get previous HEAD if it exists
  const previousState = dependenciesState[cacheName] || {};
  const previousHead = previousState.current || null;

  // Clone or update cached repo
  if (existsSync(join(cachePath, '.git'))) {
    console.log(`  [${prefix}] Updating cached repo...`);
    execSync(
      `git fetch origin && git checkout ${branch} && git merge origin/${branch}`,
      {
        cwd: cachePath,
        stdio: 'inherit',
      },
    );
  } else {
    console.log(`  [${prefix}] Cloning to cache...`);
    execSync(`git clone --branch ${branch} ${repo} ${cachePath}`, {
      stdio: 'inherit',
    });
  }

  // Get new HEAD
  const currentHead = getRepoHead(cachePath);

  // Update state (preserve config fields)
  dependenciesState[cacheName] = {
    prefix,
    repo,
    branch,
    previous: previousHead,
    current: currentHead,
  };

  // Generate changelog entry if there were changes
  if (previousHead && currentHead && previousHead !== currentHead) {
    const log = getCommitLog(cachePath, previousHead, currentHead);
    if (log) {
      changelog.push({
        prefix,
        cacheName,
        previousHead,
        currentHead,
        log,
      });
    }
  }

  // Sync from cache to target using rsync
  // Note: Build artifacts for subprojects like Command-T and Shellbot should
  // be built in the `.cache` directory so they get synced over and not deleted
  // due to `--delete`.
  const targetPath = join(REPO_ROOT, prefix);
  console.log(`  [${prefix}] Syncing from cache...`);
  mkdirSync(dirname(targetPath), {recursive: true});
  execSync(
    `rsync -av --delete --exclude='.git' "${cachePath}/" "${targetPath}/"`,
    {
      stdio: 'inherit',
    },
  );

  console.log(`  [${prefix}] Done.\n`);
}

// Run updates in batches of 5
const BATCH_SIZE = 5;
for (let i = 0; i < DEPENDENCIES.length; i += BATCH_SIZE) {
  const batch = DEPENDENCIES.slice(i, i + BATCH_SIZE);
  await Promise.all(batch.map(updateDependency));
}

// Save updated state
saveDependenciesState(dependenciesState);

console.log('All dependencies updated successfully.');

// Print changelog
if (changelog.length > 0) {
  console.log('\n' + '='.repeat(80));
  console.log('CHANGELOG');
  console.log('='.repeat(80) + '\n');

  for (const entry of changelog) {
    console.log(`${entry.prefix}`);
    console.log(
      `  ${entry.previousHead.substring(0, 7)}..${
        entry.currentHead.substring(0, 7)
      }`,
    );
    console.log();
    // Indent each line of the log
    const indentedLog = entry.log.split('\n').map((line) => `  ${line}`).join(
      '\n',
    );
    console.log(indentedLog);
    console.log();
  }

  console.log('='.repeat(80));
  console.log(
    `${changelog.length} ${
      changelog.length === 1 ? 'dependency' : 'dependencies'
    } updated`,
  );
  console.log('='.repeat(80));
} else {
  console.log('\nNo changes detected in any dependencies.');
}
