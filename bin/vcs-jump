#!/usr/bin/env ruby

# Based on `git-jump`, that comes with Git, but works with Mercurial as well
# (ported to Ruby to make some of the relative path manipulation easier).

require 'pathname'
require 'shellwords'
require 'tempfile'

def usage()
  puts <<-EOF.gsub(/^ {4}/, '')
    usage: vcs-jump <mode> [<args>]

    Jump to interesting elements in an editor.
    The <mode> parameter is one of:

    diff: elements are diff hunks. Arguments are given to diff.
    [supports: git, hg]

    merge: elements are merge conflicts. Arguments are ignored.
    [supports: git, hg]

    grep: elements are grep hits. Arguments are given to grep.
    [supports: git, hg]
  EOF
end

def open_editor(tmp)
  editor = `git var GIT_EDITOR 2> /dev/null`.chomp
  editor = ENV['EDITOR'] if !$?.success?
  editor = `which vim`.chomp unless editor
  raise 'error: cannot locate editor' if editor == ''

  basename = Pathname.new(editor).basename.to_s
  if basename == 'vim' || basename == 'nvim'
    additional_args = %w[-c :cw] # open the quickfix window
  end

  exec(editor, '-q', tmp, *additional_args)
end

def pwd
  @pwd ||= Pathname.pwd.realpath
end

def absolutize(file)
  Pathname.new(file).realpath
end

def git_root
  root = `git rev-parse --show-toplevel 2> /dev/null`.chomp
  [absolutize(root), 'git'] if $?.success?
end

def hg_root
  root = `hg root`.chomp
  [absolutize(root), 'hg'] if $?.success?
end

def vcs_info
  @info ||= begin
    info = git_root
    info = hg_root unless info

    raise 'Unable to detect VCS info' unless info

    info
  end
end

def root
  vcs_info[0]
end

def vcs
  vcs_info[1]
end

def git?
  vcs == 'git'
end

def hg?
  vcs == 'hg'
end

def shellescape(args)
  ARGV.map { |arg| Shellwords.shellescape(arg) }.join(' ')
end

def redir(new_fd, &block)
  old_stdout, old_stderr = $stdout, $stderr
  $stdout, $stderr = new_fd, new_fd
  yield
ensure
  $stdout, $stderr = old_stdout, old_stderr
end

def mode_diff(args)
  args = shellescape(args)
  diff =  git? ? `git -c diff.noprefix=no -c diff.mnemonicPrefix=no diff --no-color #{args}` : `hg diff --git #{args}`
  idx  = nil
  file = nil

  diff.lines.each do |line|
    # Setting the inner Perl hacker free since 2007.
    (line =~ %r{^\+\+\+ b/(.*?)\t?$}) ? (file = root + $~[1]) : (next unless file)
    (line =~ %r{^@@ .*?\+(\d+)}) ? (idx = $~[1].to_i) : (next unless idx)
    (line =~ %r{^ }) && (idx += 1; next)
    (line =~ %r{^[-+]\s*(.*)}) && ( puts "#{file}:#{idx}: #{$~[1]}"; idx = nil)
  end
end

def mode_merge(__args__ignored)
  if git?
    prefix = "#{pwd}/"
    command = 'git ls-files -u'
    filter = "perl -pe 's#^.*?\\t##{prefix}#'"
  else
    command = 'hg resolve -l'
    filter = "egrep -e '^U\\s+' | perl -pe 's#^U\\s+##{root}/#'"
  end
  puts %x{
    #{command} |
    #{filter} |
    sort |
    uniq |
    while IFS= read fn; do
      grep -Hn '^<<<<<<<' "$fn"
    done
  }
end

def mode_grep(args)
  # Clean up extra whitespace, to make results look better if the editor shows
  # them to us in the status bar.
  if git?
    can_use_column = %x{git grep --help}.include?('--column')
    if can_use_column
      files = %x{git grep -n --column #{shellescape args}}.lines
      puts files.collect { |f| pwd + f.chomp.sub(/(:\d+:\d+:)\s*/, '\1') }
    else
      files = %x{git grep -n #{shellescape args}}.lines
      puts files.collect { |f| pwd + f.chomp.sub(/(:\d+:)\s*/, '\1') }
    end
  else
    files = %x{hg grep --template '{path}:{lineno}:{texts}\n' #{shellescape args}}.lines
    puts files.collect { |f| root + f.chomp.sub(/(:\d+:)\s*/, '\1') }
  end
end

if ARGV.count < 1
  usage()
  exit 1
end

mode = ARGV.shift

if STDOUT.tty?
  begin
    tmp = Tempfile.new('vcs-jump')
    redir(tmp) { send("mode_#{mode}", ARGV) }
    tmp.flush
    open_editor(tmp.path)
  ensure
    tmp.close
  end
else
  send("mode_#{mode}", ARGV)
end
